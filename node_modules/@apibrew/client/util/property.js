import { getAnnotation, isAnnotationEnabled } from "./annotation";
import { Type } from "../model/resource";
export function isSpecialProperty(property) {
    return isAnnotationEnabled(property.annotations, 'SpecialProperty');
}
export function getPropertyOrder(name, property) {
    var order = parseInt(getAnnotation(property.annotations, 'Order', '0'));
    if (order !== 0) {
        return order;
    }
    if (name === 'id') {
        return -2;
    }
    if (isSpecialProperty(property)) {
        return 1000;
    }
    if (hasComplexStructure(property)) {
        return 100;
    }
    return 0;
}
export function hasComplexStructure(property) {
    return property.type === Type.LIST || property.type === Type.MAP || property.type === Type.STRUCT;
}
export function sortedProperties(properties) {
    var propertyNames = Object.keys(properties);
    return propertyNames.sort(function (a, b) {
        var aProperty = properties[a];
        var bProperty = properties[b];
        if (!aProperty || !bProperty) {
            return 0;
        }
        var aOrder = getPropertyOrder(a, aProperty);
        var bOrder = getPropertyOrder(b, bProperty);
        return aOrder - bOrder;
    });
}
export function isComparableProperty(property) {
    if (property.type === Type.INT32 || property.type === Type.INT64 || property.type === Type.FLOAT32 || property.type === Type.FLOAT64) {
        return true;
    }
    if (property.type === Type.DATE || property.type === Type.TIME || property.type === Type.TIMESTAMP) {
        return true;
    }
    return false;
}
export function withPropertyOrder(property, order) {
    if (!property.annotations) {
        property.annotations = {};
    }
    property.annotations['Order'] = order.toString();
    return property;
}
export function isSimpleProperty(property) {
    return property.type === 'BOOL' || property.type === 'STRING' || property.type === 'INT32' || property.type === 'INT64' || property.type === 'FLOAT32' || property.type === 'FLOAT64';
}
export function makeProperties(properties) {
    var orderStart = -2;
    if (properties['id']) {
        properties['id'].annotations['Order'] = orderStart.toString();
        orderStart++;
    }
    if (properties['version']) {
        properties['version'].annotations['Order'] = orderStart.toString();
        orderStart++;
    }
    if (properties['auditData']) {
        properties['auditData'].annotations['Order'] = orderStart.toString();
        orderStart++;
    }
    return Object.entries(properties)
        .map(function (item) {
        return { name: item[0], property: item[1] };
    })
        .sort(function (a, b) { return getPropertyOrder(a.name, a.property) - getPropertyOrder(a.name, b.property); })
        .map(function (item, index) {
        if (!item.property.annotations) {
            item.property.annotations = {};
        }
        item.property.annotations['Order'] = (index + orderStart).toString();
        return item;
    })
        .sort(function (a, b) { return getPropertyOrder(a.name, a.property) - getPropertyOrder(a.name, b.property); });
}
