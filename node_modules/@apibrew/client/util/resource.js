var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { getAnnotation } from "./annotation";
export function ensureGivenPropertiesOrder(schema, properties) {
    var updated = false;
    for (var i = 0; i < properties.length; i++) {
        var property = schema.properties[properties[i]];
        var order = parseInt(getAnnotation(property.annotations, 'Order', '-100'));
        if (order !== i) {
            updated = true;
            console.log("Updating order of ".concat(properties[i], " from ").concat(order, " to ").concat(i));
            property.annotations = __assign(__assign({}, property.annotations || {}), { Order: i.toString() });
        }
    }
    return updated;
}
