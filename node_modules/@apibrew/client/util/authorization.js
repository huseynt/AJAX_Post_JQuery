var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
export var AccessLevel;
(function (AccessLevel) {
    AccessLevel[AccessLevel["NONE"] = 0] = "NONE";
    AccessLevel[AccessLevel["READ"] = 1] = "READ";
    AccessLevel[AccessLevel["READ_WRITE"] = 2] = "READ_WRITE";
})(AccessLevel || (AccessLevel = {}));
export function checkResourceAccess(permissions, resource, operation, recordId) {
    var matchingConstraints = permissions.filter(function (constraint) {
        if (constraint.namespace && constraint.namespace !== resource.namespace.name) {
            return false;
        }
        if (constraint.resource && constraint.resource !== resource.name) {
            return false;
        }
        return true;
    });
    var readCompatibleConstraints = matchingConstraints.filter(function (constraint) {
        return constraint.operation === 'FULL' || constraint.operation === operation;
    });
    // checking can read
    var hasAllow = readCompatibleConstraints.some(function (constraint) { return !constraint.permit || constraint.permit === 'ALLOW'; });
    var hasReject = readCompatibleConstraints.some(function (constraint) { return constraint.permit === 'REJECT'; });
    return hasAllow && !hasReject;
}
export function checkResourcePropertyAccess(permissions, resource) {
    var matchingConstraints = permissions.filter(function (constraint) {
        if (constraint.namespace && constraint.namespace !== resource.namespace.name) {
            return false;
        }
        if (constraint.resource && constraint.resource !== resource.name) {
            return false;
        }
        return true;
    });
    var readCompatibleConstraints = matchingConstraints.filter(function (constraint) {
        return !constraint.operation || constraint.operation === 'READ' || constraint.operation === 'FULL';
    });
    var writeCompatibleConstraints = matchingConstraints.filter(function (constraint) {
        return constraint.operation === 'UPDATE' || constraint.operation === 'CREATE' || constraint.operation === 'FULL';
    });
    // checking can read
    var hasReadAllow = readCompatibleConstraints.some(function (constraint) { return !constraint.permit || constraint.permit === 'ALLOW'; });
    var hasReadReject = readCompatibleConstraints.some(function (constraint) { return constraint.permit === 'REJECT'; });
    if (hasReadReject || !hasReadAllow) {
        return AccessLevel.NONE;
    }
    // checking can write
    var hasWriteAllow = writeCompatibleConstraints.some(function (constraint) { return !constraint.permit || constraint.permit === 'ALLOW'; });
    var hasWriteReject = writeCompatibleConstraints.some(function (constraint) { return constraint.permit === 'REJECT'; });
    if (hasWriteReject || !hasWriteAllow) {
        return AccessLevel.READ;
    }
    return AccessLevel.READ_WRITE;
}
export function filterRecordForUpdate(permissions, resource, record) {
    var recordForUpdate = __assign({}, record);
    for (var name in resource.properties) {
        if (name === 'id') {
            continue;
        }
        var propertyAccess = checkResourcePropertyAccess(permissions, resource);
        if (propertyAccess !== AccessLevel.READ_WRITE) {
            delete recordForUpdate[name];
        }
    }
    return recordForUpdate;
}
