var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import axios from "axios";
import { ApiException } from "../api-exception";
import { Code } from "../model/extension";
import { TokenTerm } from "../model/token";
import { BooleanExpressionBuilder } from "../boolean-expression-builder";
import { RepositoryImpl } from "./repository-impl";
import { decodeBase64 } from "../util/base64";
var Urls = /** @class */ (function () {
    function Urls() {
    }
    Urls.resourceUrl = function (url) {
        return "".concat(url, "/resources");
    };
    Urls.resourceByName = function (url, namespace, name) {
        return "".concat(Urls.resourceUrl(url), "/by-name/").concat(namespace, "/").concat(name);
    };
    Urls.resourceById = function (url, id) {
        return "".concat(Urls.resourceUrl(url), "/").concat(id);
    };
    Urls.recordUrl = function (url, restPath) {
        return "".concat(url, "/").concat(restPath);
    };
    Urls.recordSearchUrl = function (url, restPath) {
        return "".concat(url, "/").concat(restPath, "/_search");
    };
    Urls.recordWatchUrl = function (url, restPath, filters) {
        var watchUrl = "".concat(url, "/").concat(restPath, "/_watch");
        if (filters) {
            if (watchUrl) {
                watchUrl += '?' + Object.entries(filters).map(function (entry) { return encodeURIComponent(entry[0]) + '=' + encodeURIComponent(entry[1]); }).join('&');
            }
        }
        return watchUrl;
    };
    Urls.recordByIdUrl = function (url, restPath, id) {
        return "".concat(url, "/").concat(restPath, "/").concat(id);
    };
    Urls.recordActionByIdUrl = function (url, restPath, id, action) {
        return "".concat(url, "/").concat(restPath, "/").concat(id, "/_").concat(action);
    };
    Urls.authenticate = function (url) {
        return "".concat(url, "/authentication/token");
    };
    Urls.eventsUrl = function (url) {
        return "".concat(url, "/_events");
    };
    return Urls;
}());
export { Urls };
var DefaultTokenStorage = /** @class */ (function () {
    function DefaultTokenStorage() {
        this.data = new Map();
    }
    DefaultTokenStorage.prototype.clear = function () {
        this.data.clear();
    };
    DefaultTokenStorage.prototype.get = function (name) {
        return this.data.get(name);
    };
    DefaultTokenStorage.prototype.set = function (name, token) {
        this.data.set(name, token);
    };
    DefaultTokenStorage.prototype.list = function () {
        var result = [];
        this.data.forEach(function (value, key) {
            result.push({
                name: key,
                token: value,
            });
        });
        return result;
    };
    return DefaultTokenStorage;
}());
export { DefaultTokenStorage };
var ACCESS_TOKEN = 'ACCESS_TOKEN';
var REFRESH_TOKEN = 'REFRESH_TOKEN';
var ClientImpl = /** @class */ (function () {
    function ClientImpl(url) {
        this.url = url;
        this.bypassExtensionsEnabled = false;
        this.tokenStorage = new DefaultTokenStorage();
    }
    ClientImpl.prototype.useTokenStorage = function (tokenStorage) {
        this.tokenStorage.list().forEach(function (token) {
            tokenStorage.set(token.name, token.token);
        });
        this.tokenStorage = tokenStorage;
        this.setupTokenRefresher();
    };
    ClientImpl.ensureResponseSuccess = function (resp) {
        if (!ClientImpl.isSuccess(resp)) {
            var error = resp.data;
            if (error) {
                throw ApiException.fromError(resp.data);
            }
            else {
                throw new ApiException(Code.INTERNAL_ERROR, resp.statusText);
            }
        }
    };
    ClientImpl.isSuccess = function (resp) {
        return resp.status >= 200 && resp.status < 300;
    };
    ClientImpl.prototype.applyResource = function (resource, forceMigrate) {
        return __awaiter(this, void 0, void 0, function () {
            var resp;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, axios.get(Urls.resourceByName(this.url, resource.namespace.name, resource.name))];
                    case 1:
                        resp = _a.sent();
                        if (ClientImpl.isSuccess(resp)) {
                            return [2 /*return*/, this.updateResource(resource, forceMigrate)];
                        }
                        else if (resp.status == 404) {
                            return [2 /*return*/, this.createResource(resource, forceMigrate)];
                        }
                        else {
                            ClientImpl.ensureResponseSuccess(resp);
                            throw new Error("Unreachable");
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    ClientImpl.prototype.getResourceByName = function (namespace, name) {
        return __awaiter(this, void 0, void 0, function () {
            var resp;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, axios.get(Urls.resourceByName(this.url, namespace, name), {
                            headers: this.headers(),
                            validateStatus: function (status) { return true; },
                        })];
                    case 1:
                        resp = _a.sent();
                        ClientImpl.ensureResponseSuccess(resp);
                        return [2 /*return*/, resp.data];
                }
            });
        });
    };
    ClientImpl.prototype.listResources = function () {
        return __awaiter(this, void 0, void 0, function () {
            var resp;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, axios.get(Urls.resourceUrl(this.url), {
                            headers: this.headers(),
                            validateStatus: function (status) { return true; },
                        })];
                    case 1:
                        resp = _a.sent();
                        ClientImpl.ensureResponseSuccess(resp);
                        return [2 /*return*/, resp.data.content];
                }
            });
        });
    };
    ClientImpl.prototype.createResource = function (resource, forceMigrate) {
        return __awaiter(this, void 0, void 0, function () {
            var resp;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, axios.post(Urls.resourceUrl(this.url), resource, {
                            headers: __assign(__assign({}, this.headers()), { "X-Force-Migrate": forceMigrate ? "true" : "false" }),
                            validateStatus: function (status) { return true; },
                        })];
                    case 1:
                        resp = _a.sent();
                        ClientImpl.ensureResponseSuccess(resp);
                        return [2 /*return*/, resp.data];
                }
            });
        });
    };
    ClientImpl.prototype.updateResource = function (resource, forceMigrate) {
        return __awaiter(this, void 0, void 0, function () {
            var resp;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, axios.put(Urls.resourceById(this.url, resource.id), resource, {
                            headers: __assign(__assign({}, this.headers()), { "X-Force-Migrate": forceMigrate ? "true" : "false" }),
                            validateStatus: function (status) { return true; },
                        })];
                    case 1:
                        resp = _a.sent();
                        ClientImpl.ensureResponseSuccess(resp);
                        return [2 /*return*/, resp.data];
                }
            });
        });
    };
    ClientImpl.prototype.deleteResource = function (resource, forceMigrate) {
        return __awaiter(this, void 0, void 0, function () {
            var resp;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, axios.delete(Urls.resourceById(this.url, resource.id), {
                            headers: __assign(__assign({}, this.headers()), { "X-Force-Migrate": forceMigrate ? "true" : "false" }),
                            validateStatus: function (status) { return true; },
                        })];
                    case 1:
                        resp = _a.sent();
                        ClientImpl.ensureResponseSuccess(resp);
                        return [2 /*return*/];
                }
            });
        });
    };
    ClientImpl.prototype.authenticateWithToken = function (token) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                this.tokenStorage.set(ACCESS_TOKEN, token);
                this.tokenStorage.set(REFRESH_TOKEN, token);
                return [2 /*return*/, this.refreshToken()];
            });
        });
    };
    ClientImpl.prototype.authenticateWithUsernameAndPassword = function (username, password) {
        return __awaiter(this, void 0, void 0, function () {
            var refreshTokenResp, accessTokenResp;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, axios.post(Urls.authenticate(this.url), {
                            username: username,
                            password: password,
                            term: TokenTerm.LONG
                        }, {
                            validateStatus: function (status) { return true; },
                        })];
                    case 1:
                        refreshTokenResp = _a.sent();
                        ClientImpl.ensureResponseSuccess(refreshTokenResp);
                        this.tokenStorage.set(REFRESH_TOKEN, refreshTokenResp.data.token.content);
                        return [4 /*yield*/, axios.post(Urls.authenticate(this.url), {
                                username: username,
                                password: password,
                                term: TokenTerm.LONG
                            }, {
                                validateStatus: function (status) { return true; },
                            })];
                    case 2:
                        accessTokenResp = _a.sent();
                        ClientImpl.ensureResponseSuccess(accessTokenResp);
                        this.tokenStorage.set(ACCESS_TOKEN, accessTokenResp.data.token.content);
                        this.setupTokenRefresher();
                        return [2 /*return*/];
                }
            });
        });
    };
    ClientImpl.prototype.newClientAuthenticateWithToken = function (token) {
        var client = new ClientImpl(this.url);
        client.useTokenStorage(this.tokenStorage);
        client.bypassExtensionsEnabled = this.bypassExtensionsEnabled;
        client.authenticateWithToken(token);
        return client;
    };
    ClientImpl.prototype.newClientAuthenticateWithUsernameAndPassword = function (username, password) {
        return __awaiter(this, void 0, void 0, function () {
            var client;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = new ClientImpl(this.url);
                        client.useTokenStorage(this.tokenStorage);
                        client.bypassExtensionsEnabled = this.bypassExtensionsEnabled;
                        return [4 /*yield*/, client.authenticateWithUsernameAndPassword(username, password)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, client];
                }
            });
        });
    };
    ClientImpl.prototype.headers = function () {
        var headers = {
            "Content-Type": "application/json",
        };
        if (this.tokenStorage.get(ACCESS_TOKEN)) {
            headers["Authorization"] = "Bearer " + this.tokenStorage.get(ACCESS_TOKEN);
        }
        if (this.bypassExtensionsEnabled) {
            headers["BypassExtensions"] = "true";
        }
        return headers;
    };
    ClientImpl.prototype.getUrl = function () {
        return this.url;
    };
    ClientImpl.prototype.bypassExtensions = function (bypassExtensions) {
        this.bypassExtensionsEnabled = bypassExtensions;
    };
    ClientImpl.prototype.listRecords = function (entityInfo, params) {
        return __awaiter(this, void 0, void 0, function () {
            var url, queryParams_1, resp, resp;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!params) {
                            params = {};
                        }
                        if (!(!params.query && !params.sorting && !params.aggregation)) return [3 /*break*/, 2];
                        url = Urls.recordUrl(this.url, entityInfo.restPath);
                        queryParams_1 = {};
                        if (params) {
                            if (params.resolveReferences && params.resolveReferences.length > 0) {
                                queryParams_1['resolve-references'] = params.resolveReferences.join(',');
                            }
                            if (params.useHistory) {
                                queryParams_1['use-history'] = 'true';
                            }
                            if (params.limit && params.limit > 0) {
                                queryParams_1['limit'] = params.limit.toString();
                            }
                            if (params.offset && params.offset > 0) {
                                queryParams_1['offset'] = params.offset.toString();
                            }
                            if (params.filters) {
                                Object.entries(params.filters).forEach(function (filter) {
                                    queryParams_1[filter[0]] = filter[1];
                                });
                            }
                        }
                        url = url + '?' + Object.entries(queryParams_1).map(function (entry) { return entry[0] + '=' + entry[1]; }).join('&');
                        return [4 /*yield*/, axios.get(url, {
                                headers: this.headers(),
                                validateStatus: function (status) { return true; },
                            })];
                    case 1:
                        resp = _a.sent();
                        ClientImpl.ensureResponseSuccess(resp);
                        return [2 /*return*/, resp.data];
                    case 2: return [4 /*yield*/, axios.post(Urls.recordSearchUrl(this.url, entityInfo.restPath), params, {
                            headers: this.headers(),
                            validateStatus: function (status) { return true; },
                        })];
                    case 3:
                        resp = _a.sent();
                        ClientImpl.ensureResponseSuccess(resp);
                        return [2 /*return*/, resp.data];
                }
            });
        });
    };
    ClientImpl.prototype.applyRecord = function (entityInfo, record) {
        return __awaiter(this, void 0, void 0, function () {
            var resp;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, axios.patch(Urls.recordUrl(this.url, entityInfo.restPath), record, {
                            headers: this.headers(),
                            validateStatus: function (status) { return true; },
                        })];
                    case 1:
                        resp = _a.sent();
                        ClientImpl.ensureResponseSuccess(resp);
                        return [2 /*return*/, resp.data];
                }
            });
        });
    };
    ClientImpl.prototype.deleteRecord = function (entityInfo, id) {
        return __awaiter(this, void 0, void 0, function () {
            var resp;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, axios.delete(Urls.recordByIdUrl(this.url, entityInfo.restPath, id), {
                            headers: this.headers(),
                            validateStatus: function (status) { return true; },
                        })];
                    case 1:
                        resp = _a.sent();
                        ClientImpl.ensureResponseSuccess(resp);
                        return [2 /*return*/, resp.data];
                }
            });
        });
    };
    ClientImpl.prototype.updateRecord = function (entityInfo, record) {
        return __awaiter(this, void 0, void 0, function () {
            var resp;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, axios.put(Urls.recordByIdUrl(this.url, entityInfo.restPath, record.id), record, {
                            headers: this.headers(),
                            validateStatus: function (status) { return true; },
                        }).catch()];
                    case 1:
                        resp = _a.sent();
                        ClientImpl.ensureResponseSuccess(resp);
                        return [2 /*return*/, resp.data];
                }
            });
        });
    };
    ClientImpl.prototype.getRecord = function (entityInfo, params) {
        return __awaiter(this, void 0, void 0, function () {
            var finalUrl, resp;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        finalUrl = Urls.recordByIdUrl(this.url, entityInfo.restPath, params.id);
                        if (params.resolveReferences && params.resolveReferences.length > 0) {
                            finalUrl += "?resolve-references=" + params.resolveReferences.join(",");
                        }
                        return [4 /*yield*/, axios.get(finalUrl, {
                                headers: this.headers(),
                                validateStatus: function (status) { return true; },
                            })];
                    case 1:
                        resp = _a.sent();
                        ClientImpl.ensureResponseSuccess(resp);
                        return [2 /*return*/, resp.data];
                }
            });
        });
    };
    ClientImpl.prototype.createRecord = function (entityInfo, record) {
        return __awaiter(this, void 0, void 0, function () {
            var resp;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, axios.post(Urls.recordUrl(this.url, entityInfo.restPath), record, {
                            headers: this.headers(),
                            validateStatus: function (status) { return true; },
                        })];
                    case 1:
                        resp = _a.sent();
                        ClientImpl.ensureResponseSuccess(resp);
                        return [2 /*return*/, resp.data];
                }
            });
        });
    };
    ClientImpl.prototype.loadRecord = function (entityInfo, record, resolveReferences) {
        return __awaiter(this, void 0, void 0, function () {
            var conditions, resp;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (record.id) {
                            return [2 /*return*/, this.getRecord(entityInfo, {
                                    id: record.id,
                                    resolveReferences: resolveReferences,
                                })];
                        }
                        conditions = Object.entries(record).map(function (_a) {
                            var key = _a[0], value = _a[1];
                            return BooleanExpressionBuilder.eq(key, value);
                        });
                        return [4 /*yield*/, axios.post(Urls.recordSearchUrl(this.url, entityInfo.restPath), {
                                query: BooleanExpressionBuilder.and.apply(BooleanExpressionBuilder, conditions),
                                resolveReferences: resolveReferences,
                            }, {
                                headers: this.headers(),
                                validateStatus: function (status) { return true; },
                            })];
                    case 1:
                        resp = _a.sent();
                        ClientImpl.ensureResponseSuccess(resp);
                        if (resp.data.total == 0) {
                            throw new ApiException(Code.RECORD_NOT_FOUND, "No record found for " + record);
                        }
                        else if (resp.data.total > 1) {
                            throw new ApiException(Code.RECORD_VALIDATION_ERROR, "Multiple records found for " + record);
                        }
                        return [2 /*return*/, resp.data.content[0]];
                }
            });
        });
    };
    ClientImpl.prototype.writeEvent = function (channelKey, event) {
        return __awaiter(this, void 0, void 0, function () {
            var url, resp;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = Urls.eventsUrl(this.url) + "?channelKey=" + channelKey;
                        return [4 /*yield*/, axios.post(url, event, {
                                headers: this.headers(),
                                validateStatus: function (status) { return true; },
                            })];
                    case 1:
                        resp = _a.sent();
                        ClientImpl.ensureResponseSuccess(resp);
                        return [2 /*return*/];
                }
            });
        });
    };
    ClientImpl.prototype.repo = function (entityInfo) {
        return this.repository(entityInfo);
    };
    ClientImpl.prototype.repository = function (entityInfo) {
        return new RepositoryImpl(this, entityInfo);
    };
    ClientImpl.newClient = function (url) {
        if (!url) {
            url = "http://localhost:8080";
        }
        return new ClientImpl(url);
    };
    ClientImpl.newClientByServerConfig = function (serverConfig) {
        return __awaiter(this, void 0, void 0, function () {
            var httpPort, addr, client;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        httpPort = serverConfig.httpPort;
                        if (httpPort == 0) {
                            httpPort = serverConfig.port;
                        }
                        addr = serverConfig.host + ":" + httpPort;
                        if (!addr.startsWith("http")) {
                            if (serverConfig.insecure) {
                                addr = "http://" + addr;
                            }
                            else {
                                addr = "https://" + addr;
                            }
                        }
                        if (addr.endsWith("/")) {
                            addr = addr.substring(0, addr.length - 1);
                        }
                        client = ClientImpl.newClient(addr);
                        if (!serverConfig.authentication) return [3 /*break*/, 4];
                        if (!serverConfig.authentication.token) return [3 /*break*/, 2];
                        return [4 /*yield*/, client.authenticateWithToken(serverConfig.authentication.token)];
                    case 1:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 2: return [4 /*yield*/, client.authenticateWithUsernameAndPassword(serverConfig.authentication.username, serverConfig.authentication.password)];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4: return [2 /*return*/, client];
                }
            });
        });
    };
    ClientImpl.prototype.setupTokenRefresher = function () {
        var _this = this;
        if (this.tokenRefreshInterval) {
            clearInterval(this.tokenRefreshInterval);
        }
        this.tokenRefreshInterval = setInterval(function () { return _this.ensureTokenFresh(); }, 1000 * 60 * 5);
    };
    ClientImpl.prototype.getTokenBody = function () {
        // check if access token is expired
        var token = this.tokenStorage.get(ACCESS_TOKEN);
        if (!token) {
            return;
        }
        var tokenParts = token.split(".");
        if (tokenParts.length != 3) {
            return;
        }
        var payload = JSON.parse(decodeBase64(tokenParts[1]));
        return payload;
    };
    ClientImpl.prototype.ensureTokenFresh = function () {
        var refreshToken = this.tokenStorage.get(REFRESH_TOKEN);
        if (!refreshToken) {
            return;
        }
        var payload = this.getTokenBody();
        if (!payload) {
            return;
        }
        if (payload.exp * 1000 > Date.now()) {
            return;
        }
        console.warn("Access token expired, refreshing...");
        this.refreshToken();
    };
    ClientImpl.prototype.refreshToken = function () {
        var _this = this;
        var refreshToken = this.tokenStorage.get(REFRESH_TOKEN);
        return axios.put(Urls.authenticate(this.url), {
            token: refreshToken,
            term: TokenTerm.LONG
        }, {
            validateStatus: function (status) { return true; },
        }).then(function (resp) {
            if (ClientImpl.isSuccess(resp)) {
                _this.tokenStorage.set(ACCESS_TOKEN, resp.data.token.content);
            }
        }).catch(function (e) {
            console.error("Error refreshing token", e);
        });
    };
    ClientImpl.prototype.isAuthenticated = function () {
        return !!this.tokenStorage.get(ACCESS_TOKEN);
    };
    ClientImpl.prototype.invalidateAuthentication = function () {
        this.tokenStorage.clear();
    };
    return ClientImpl;
}());
export { ClientImpl };
