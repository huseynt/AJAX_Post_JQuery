var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { beforeCreate, beforeDelete, beforeList, beforeUpdate, afterGet } from "./condition";
import { Code } from "../model/extension";
import { ApiException } from "../api-exception";
import { BooleanExpressionBuilder } from "../boolean-expression-builder";
export function graceFullDelete(property, value) {
    return {
        operate: function (handler) {
            handler = handler.configure(function (ei) {
                return __assign(__assign({}, ei), { responds: true });
            });
            handler.when(beforeDelete()).localOperator(graceFullDeleteOperator(property, value));
            handler.when(afterGet()).localOperator(graceFullDeleteOperator(property, value));
            handler.when(beforeCreate()).localOperator(graceFullDeleteOperator(property, value));
            handler.when(beforeUpdate()).localOperator(graceFullDeleteOperator(property, value));
            return handler.when(beforeList()).localOperator(function (event, entity) {
                var query = event.recordSearchParams.query;
                var deletedFilterExp = BooleanExpressionBuilder.not(BooleanExpressionBuilder.eq(property, value));
                if (query == null) {
                    event.recordSearchParams.query = deletedFilterExp;
                }
                else {
                    event.recordSearchParams.query = BooleanExpressionBuilder.and(query, deletedFilterExp);
                }
                return entity;
            });
        }
    };
}
export function graceFullDeleteOperator(property, value) {
    return function (event, entity) {
        if (entity[property] === value) {
            throw new ApiException(Code.RECORD_VALIDATION_ERROR, "Entity is already deleted");
        }
        return entity;
    };
}
export function dataSeparation(property, ownerFieldGetter) {
    var dataSeparator = function (event, entity) {
        if (entity[property] === event.annotations.user) {
            return entity;
        }
        else {
            throw new ApiException(Code.RECORD_VALIDATION_ERROR, "Entity is not owned by user");
        }
    };
    return {
        operate: function (handler) {
            handler = handler.configure(function (ei) {
                return __assign(__assign({}, ei), { responds: true });
            });
            handler.when(beforeCreate()).localOperator(dataSeparator);
            handler.when(beforeUpdate()).localOperator(dataSeparator);
            handler.when(beforeDelete()).localOperator(dataSeparator); // fix delete
            handler.when(afterGet()).localOperator(dataSeparator);
            return handler.when(beforeList()).localOperator(function (event, entity) {
                var query = event.recordSearchParams.query;
                var ownerFilterExp = BooleanExpressionBuilder.eq(property, event.annotations.user);
                if (query == null) {
                    event.recordSearchParams.query = ownerFilterExp;
                }
                else {
                    event.recordSearchParams.query = BooleanExpressionBuilder.and(query, ownerFilterExp);
                }
                return entity;
            });
        }
    };
}
export function execute(consumer) {
    return {
        operate: function (handler) {
            return handler.localOperator(function (event, entity) {
                consumer(event, entity);
                return entity;
            });
        }
    };
}
export function reject(message) {
    return check(function (event, entity) { return false; }, message);
}
export function check(condition, message) {
    return {
        operate: function (handler) {
            return handler.localOperator(function (event, entity) {
                if (condition(event, entity)) {
                    return entity;
                }
                else {
                    throw new ApiException(Code.RECORD_VALIDATION_ERROR, message || "Condition not met");
                }
            });
        }
    };
}
