import { Client } from "../../client";
import { ExtensionService } from "../extension-service";
import { ExtensionInfo } from "../../extension-info";
import { Event } from "../../model/extension";
import { Entity } from "../../entity";
import { EntityInfo } from "../../entity-info";
import { Handler } from "../handler";
import { Condition } from "../condition";
import { Operator } from "../operator";
type Predicate<T extends Entity> = (event: Event, entity: T) => boolean;
export declare class HandlerImpl<T extends Entity> implements Handler<T> {
    private client;
    private extensionService;
    private entityInfo;
    private extensionInfo;
    private predicates;
    constructor(client: Client, extensionService: ExtensionService, entityInfo: EntityInfo, extensionInfo?: ExtensionInfo, predicates?: Predicate<any>[]);
    withExtensionInfo(extensionInfo: ExtensionInfo): Handler<T>;
    configure(configurer: (info: ExtensionInfo) => ExtensionInfo): Handler<T>;
    localOperator(localOperator: (event: Event, entity: T) => T): string;
    operate(operator: Operator<T>): string;
    private checkPredicates;
    unRegister(id: string): void;
    when(condition: Condition<T>): Handler<T>;
}
export {};
