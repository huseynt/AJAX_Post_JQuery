var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { HandlerImpl } from "./handler-impl";
import { extensionInfoToString, toExtension } from "../../extension-info";
import { ExtensionEntityInfo } from "../../model/extension";
var AbstractExtensionService = /** @class */ (function () {
    function AbstractExtensionService(serviceName, client) {
        this.serviceName = serviceName;
        this.client = client;
        this.extensionInfoSet = new Set();
        this.registeredExtensionInfoSet = new Set();
        this.extensionInfoIdMap = new Map();
        this.extensionHandlerMap = new Map();
        this.operatorMap = new Map();
        this.operatorIdExtensionInfoMap = new Map();
        this.extensionRepo = client.repo(ExtensionEntityInfo);
    }
    AbstractExtensionService.prototype.handler = function (entityInfo) {
        return new HandlerImpl(this.client, this, entityInfo);
    };
    AbstractExtensionService.prototype.registerExtensions = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                console.debug("ExtensionService: ".concat(this.serviceName, " / Registering extensions"));
                this.extensionInfoSet.forEach(function (extensionInfo) { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                if (!!this.registeredExtensionInfoSet.has(extensionInfo)) return [3 /*break*/, 2];
                                this.registeredExtensionInfoSet.add(extensionInfo);
                                return [4 /*yield*/, this.registerExtension(extensionInfo)];
                            case 1:
                                _a.sent();
                                _a.label = 2;
                            case 2: return [2 /*return*/];
                        }
                    });
                }); });
                console.debug("ExtensionService: ".concat(this.serviceName, " / Registered extensions"));
                return [2 /*return*/];
            });
        });
    };
    AbstractExtensionService.prototype.registerExtension = function (extensionInfo) {
        return __awaiter(this, void 0, void 0, function () {
            var extension;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        console.debug("ExtensionService: ".concat(this.serviceName, " / Registering extension: ").concat(extensionInfoToString(extensionInfo)));
                        extension = toExtension(extensionInfo);
                        extension.call = this.prepareExternalCall();
                        extension.name = "".concat(this.serviceName, "/").concat(extension.name);
                        return [4 /*yield*/, this.extensionRepo.apply(extension)];
                    case 1:
                        extension = _a.sent();
                        this.extensionInfoIdMap.set(extension.id.toString(), extensionInfo);
                        console.debug("ExtensionService: ".concat(this.serviceName, " / Registered extension: ").concat(extensionInfoToString(extensionInfo)));
                        return [2 /*return*/];
                }
            });
        });
    };
    AbstractExtensionService.prototype.processEvent = function (event) {
        console.debug("ExtensionService: ".concat(this.serviceName, " / Begin processing event: ").concat(JSON.stringify(event)));
        if (event.annotations == null) {
            event.annotations = {};
        }
        var extensionId = event.annotations["ExtensionId"];
        var extensionInfo = this.extensionInfoIdMap.get(extensionId);
        console.debug("ExtensionService: ".concat(this.serviceName, " / Event ID: ").concat(event.id, " => Extension ID: ").concat(extensionId));
        console.debug("ExtensionService: ".concat(this.serviceName, " / ExtensionInfo: ").concat(extensionInfoToString(extensionInfo)));
        if (extensionInfo == null) {
            console.warn("ExtensionInfo not found for event: ".concat(event));
            return event;
        }
        var eventChain = this.processEventChain(extensionInfo, event);
        console.debug("ExtensionService: ".concat(this.serviceName, " / End processing event: ").concat(JSON.stringify(event)));
        return eventChain;
    };
    AbstractExtensionService.prototype.processEventChain = function (extensionInfo, eventChain) {
        var handlers = this.extensionHandlerMap.get(extensionInfo);
        if (handlers != null) {
            for (var _i = 0, handlers_1 = handlers; _i < handlers_1.length; _i++) {
                var handler = handlers_1[_i];
                var records = eventChain.records;
                var handlerHandled = false;
                if (records != null) {
                    var eventChainRecords = eventChain.records;
                    var processedRecords = [];
                    for (var _a = 0, eventChainRecords_1 = eventChainRecords; _a < eventChainRecords_1.length; _a++) {
                        var record = eventChainRecords_1[_a];
                        console.debug("ExtensionService: ".concat(this.serviceName, " / Processing record: ").concat(record.id));
                        var processedRecord = handler(eventChain, record);
                        if (processedRecord != null) {
                            processedRecords.push(processedRecord);
                        }
                        handlerHandled = true;
                    }
                    eventChain.records = processedRecords;
                }
                if (!handlerHandled) {
                    handler(eventChain, {});
                }
            }
        }
        return eventChain;
    };
    AbstractExtensionService.prototype.registerExtensionWithOperator = function (extensionInfo, localOperator) {
        var id = generateRandomHex(6);
        this.extensionInfoSet.add(extensionInfo);
        if (!this.extensionHandlerMap.get(extensionInfo)) {
            this.extensionHandlerMap.set(extensionInfo, []);
        }
        this.extensionHandlerMap.get(extensionInfo).push(localOperator);
        this.operatorMap.set(id, localOperator);
        this.operatorIdExtensionInfoMap.set(id, extensionInfo);
        console.info("ExtensionService: ".concat(this.serviceName, " / Registered operator: ").concat(id, " => ").concat(extensionInfo));
        return id;
    };
    AbstractExtensionService.prototype.registerPendingItems = function () {
        return this.registerExtensions();
    };
    AbstractExtensionService.prototype.run = function () {
        return Promise.resolve(undefined);
    };
    AbstractExtensionService.prototype.unRegisterOperator = function (id) {
        var operator = this.operatorMap.get(id);
        if (operator == null) {
            throw new Error("Operator not found for id: ".concat(id));
        }
        var extensionInfo = this.operatorIdExtensionInfoMap.get(id);
        this.extensionHandlerMap.get(extensionInfo).splice(this.extensionHandlerMap.get(extensionInfo).indexOf(operator), 1);
        if (this.extensionHandlerMap.get(extensionInfo).length === 0) {
            this.extensionHandlerMap.delete(extensionInfo);
            this.extensionInfoSet.delete(extensionInfo);
        }
        this.operatorMap.delete(id);
        this.operatorIdExtensionInfoMap.delete(id);
        console.info("Unregistered operator: ".concat(id, " => ").concat(extensionInfo));
    };
    return AbstractExtensionService;
}());
export { AbstractExtensionService };
function generateRandomHex(length) {
    var result = '';
    for (var i = 0; i < length; i++) {
        result += Math.floor(Math.random() * 16).toString(16);
    }
    return result;
}
