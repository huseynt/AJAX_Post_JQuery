import { ExtensionService } from "../extension-service";
import { Client } from "../../client";
import { Entity } from "../../entity";
import { EntityInfo } from "../../entity-info";
import { Handler } from "../handler";
import { ExtensionInfo } from "../../extension-info";
import { Event } from "../../model";
import { ExternalCall } from "../../model/extension";
import { Record } from "../../model/record";
export declare abstract class AbstractExtensionService implements ExtensionService {
    protected serviceName: string;
    protected client: Client;
    private extensionRepo;
    protected constructor(serviceName: string, client: Client);
    readonly extensionInfoSet: Set<ExtensionInfo>;
    readonly registeredExtensionInfoSet: Set<ExtensionInfo>;
    readonly extensionInfoIdMap: Map<string, ExtensionInfo>;
    readonly extensionHandlerMap: Map<ExtensionInfo, ((event: Event, entity: Record) => Record)[]>;
    readonly operatorMap: Map<string, (event: Event, record: Record) => Record>;
    readonly operatorIdExtensionInfoMap: Map<string, ExtensionInfo>;
    handler<T extends Entity>(entityInfo: EntityInfo): Handler<T>;
    protected registerExtensions(): Promise<void>;
    registerExtension(extensionInfo: ExtensionInfo): Promise<void>;
    protected abstract prepareExternalCall(): ExternalCall;
    protected processEvent(event: Event): Event;
    private processEventChain;
    registerExtensionWithOperator(extensionInfo: ExtensionInfo, localOperator: (event: Event, entity: Record) => Record): string;
    registerPendingItems(): Promise<void>;
    run(): Promise<void>;
    unRegisterOperator(id: string): void;
    abstract close(): void;
}
