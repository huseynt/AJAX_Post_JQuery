var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var HandlerImpl = /** @class */ (function () {
    function HandlerImpl(client, extensionService, entityInfo, extensionInfo, predicates) {
        if (extensionInfo === void 0) { extensionInfo = {
            sync: true,
            responds: true,
        }; }
        if (predicates === void 0) { predicates = []; }
        this.client = client;
        this.extensionService = extensionService;
        this.entityInfo = entityInfo;
        this.extensionInfo = extensionInfo;
        this.predicates = predicates;
    }
    HandlerImpl.prototype.withExtensionInfo = function (extensionInfo) {
        return new HandlerImpl(this.client, this.extensionService, this.entityInfo, __assign({}, this.extensionInfo), __spreadArray([], this.predicates, true));
    };
    HandlerImpl.prototype.configure = function (configurer) {
        return this.withExtensionInfo(configurer(this.extensionInfo));
    };
    HandlerImpl.prototype.localOperator = function (localOperator) {
        var _this = this;
        return this.extensionService.registerExtensionWithOperator(this.extensionInfo, function (event, record) {
            if (!_this.checkPredicates(event, record.properties)) {
                return record;
            }
            return {
                properties: localOperator(event, record.properties),
            };
        });
    };
    HandlerImpl.prototype.operate = function (operator) {
        return operator.operate(this);
    };
    HandlerImpl.prototype.checkPredicates = function (event, entity) {
        for (var _i = 0, _a = this.predicates; _i < _a.length; _i++) {
            var predicate = _a[_i];
            if (!predicate(event, entity)) {
                return false;
            }
        }
        return true;
    };
    HandlerImpl.prototype.unRegister = function (id) {
        this.extensionService.unRegisterOperator(id);
    };
    HandlerImpl.prototype.when = function (condition) {
        return new HandlerImpl(this.client, this.extensionService, this.entityInfo, __assign({}, condition.configureExtensionInfo(this.extensionInfo)), __spreadArray(__spreadArray([], this.predicates, true), [condition.eventMatches.bind(condition)], false));
    };
    return HandlerImpl;
}());
export { HandlerImpl };
