import { Handler } from "./handler";
import { Entity } from "../entity";
import { Event } from "../model/extension";
export interface Operator<T extends Entity> {
    operate(handler: Handler<T>): string;
}
export declare function graceFullDelete<T extends Entity>(property: string, value: any): Operator<T>;
export declare function graceFullDeleteOperator<T extends Entity>(property: string, value: any): (event: Event, entity: T) => T;
export declare function dataSeparation<T extends Entity>(property: string, ownerFieldGetter: (entity: T) => string): Operator<T>;
export declare function execute<T extends Entity>(consumer: (event: Event, entity: T) => T | void): Operator<T>;
export declare function reject<T extends Entity>(message?: string): Operator<T>;
export declare function check<T extends Entity>(condition: (event: Event, entity: T) => boolean, message?: string): Operator<T>;
