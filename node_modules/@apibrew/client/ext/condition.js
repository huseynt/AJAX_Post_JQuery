var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { Action } from "../model/extension";
var SimpleCondition = /** @class */ (function () {
    function SimpleCondition(configureExtensionInfoFn, eventMatchesFn) {
        this.configureExtensionInfoFn = configureExtensionInfoFn;
        this.eventMatchesFn = eventMatchesFn;
    }
    SimpleCondition.prototype.configureExtensionInfo = function (extensionInfo) {
        return this.configureExtensionInfoFn(extensionInfo);
    };
    SimpleCondition.prototype.eventMatches = function (event, entity) {
        return this.eventMatchesFn(event, entity);
    };
    return SimpleCondition;
}());
export { SimpleCondition };
export function and(condition1, condition2) {
    return new SimpleCondition(function (ei) { return condition2.configureExtensionInfo(condition1.configureExtensionInfo(ei)); }, function (e, t) { return condition1.eventMatches(e, t) && condition2.eventMatches(e, t); });
}
export function or(condition1, condition2) {
    return new SimpleCondition(function (ei) { return condition2.configureExtensionInfo(condition1.configureExtensionInfo(ei)); }, function (e, t) { return condition1.eventMatches(e, t) || condition2.eventMatches(e, t); });
}
export function not(condition) {
    return new SimpleCondition(function (ei) { return condition.configureExtensionInfo(ei); }, function (e, t) { return !condition.eventMatches(e, t); });
}
export function before() {
    return new SimpleCondition(function (ei) {
        return __assign(__assign({}, ei), { order: 10 });
    }, function (e, t) { return true; });
}
export function after() {
    return new SimpleCondition(function (ei) {
        return __assign(__assign({}, ei), { order: 110 });
    }, function (e, t) { return true; });
}
export function on(customActionName) {
    return new SimpleCondition(function (ei) {
        return __assign(__assign({}, ei), { action: Action.OPERATE });
    }, function (e, t) { return e.actionName === customActionName; });
}
export function create() {
    return new SimpleCondition(function (ei) {
        return __assign(__assign({}, ei), { action: Action.CREATE });
    }, function (e, t) { return true; });
}
export function update() {
    return new SimpleCondition(function (ei) {
        return __assign(__assign({}, ei), { action: Action.UPDATE });
    }, function (e, t) { return true; });
}
export function delete$() {
    return new SimpleCondition(function (ei) {
        return __assign(__assign({}, ei), { action: Action.DELETE });
    }, function (e, t) { return true; });
}
export function get() {
    return new SimpleCondition(function (ei) {
        return __assign(__assign({}, ei), { action: Action.GET });
    }, function (e, t) { return true; });
}
export function list() {
    return new SimpleCondition(function (ei) {
        return __assign(__assign({}, ei), { action: Action.LIST });
    }, function (e, t) { return true; });
}
export function beforeCreate() {
    return and(before(), create());
}
export function beforeUpdate() {
    return and(before(), update());
}
export function beforeDelete() {
    return and(before(), delete$());
}
export function beforeGet() {
    return and(before(), get());
}
export function beforeList() {
    return and(before(), list());
}
export function afterCreate() {
    return and(after(), create());
}
export function afterUpdate() {
    return and(after(), update());
}
export function afterList() {
    return and(after(), list());
}
export function afterDelete() {
    return and(after(), delete$());
}
export function afterGet() {
    return and(after(), get());
}
export function onAction(customActionName) {
    return and(before(), on(customActionName));
}
export function async() {
    return new SimpleCondition(function (ei) {
        return __assign(__assign({}, ei), { sync: false });
    }, function (e, t) { return true; });
}
export function entityExists() {
    return new SimpleCondition(function (ei) { return ei; }, function (e, t) { return t != null; });
}
export function user() {
    var expectedUsers = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        expectedUsers[_i] = arguments[_i];
    }
    return new SimpleCondition(function (ei) { return ei; }, function (e, t) {
        var user = e.annotations["user"];
        if (user == null) {
            return false;
        }
        for (var _i = 0, expectedUsers_1 = expectedUsers; _i < expectedUsers_1.length; _i++) {
            var eu = expectedUsers_1[_i];
            if (user === eu) {
                return true;
            }
        }
        return false;
    });
}
export function resource(namespace) {
    var resource = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        resource[_i - 1] = arguments[_i];
    }
    return new SimpleCondition(function (ei) {
        return __assign(__assign({}, ei), { namespace: namespace, resources: resource });
    }, function (e, t) { return true; });
}
export function resourceFromEntityInfo(entityInfo) {
    return new SimpleCondition(function (ei) {
        return __assign(__assign({}, ei), { namespace: entityInfo.namespace, resources: [entityInfo.resource] });
    }, function (e, t) { return true; });
}
export function group() {
    var expectedGroups = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        expectedGroups[_i] = arguments[_i];
    }
    return new SimpleCondition(function (ei) { return ei; }, function (e, r) {
        var groups = e.annotations["groups"];
        if (groups == null) {
            return false;
        }
        for (var _i = 0, _a = groups.split(","); _i < _a.length; _i++) {
            var g = _a[_i];
            for (var _b = 0, expectedGroups_1 = expectedGroups; _b < expectedGroups_1.length; _b++) {
                var eg = expectedGroups_1[_b];
                if (g === eg) {
                    return true;
                }
            }
        }
        return false;
    });
}
export var Condition = {
    and: and,
    or: or,
    before: before,
    after: after,
    on: on,
    create: create,
    update: update,
    delete: delete$,
    get: get,
    list: list,
    beforeCreate: beforeCreate,
    beforeUpdate: beforeUpdate,
    beforeDelete: beforeDelete,
    beforeGet: beforeGet,
    beforeList: beforeList,
    afterCreate: afterCreate,
    afterUpdate: afterUpdate,
    afterList: afterList,
    afterDelete: afterDelete,
    afterGet: afterGet,
    onAction: onAction,
    async: async,
    entityExists: entityExists,
    user: user,
    resource: resource,
    resourceFromEntityInfo: resourceFromEntityInfo,
    group: group,
};
