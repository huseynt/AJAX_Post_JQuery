var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { StorageObjectEntityInfo } from "../model/storage-object";
import axios from "axios";
import FormData from 'form-data';
import { ClientImpl } from "../../impl/client-impl";
var StorageServiceImpl = /** @class */ (function () {
    function StorageServiceImpl(client, baseUrl) {
        this.client = client;
        this.baseUrl = baseUrl;
    }
    StorageServiceImpl.prototype.repository = function () {
        return this.client.repo(StorageObjectEntityInfo);
    };
    StorageServiceImpl.prototype.uploadBytes = function (id, data, fileName) {
        return __awaiter(this, void 0, void 0, function () {
            var formData, resp;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        formData = new FormData();
                        formData.append('file', data, fileName);
                        return [4 /*yield*/, axios.postForm(this.baseUrl + '/' + id, formData, {
                                headers: this.client.headers(),
                                validateStatus: function (status) { return true; },
                            })];
                    case 1:
                        resp = _a.sent();
                        ClientImpl.ensureResponseSuccess(resp);
                        return [2 /*return*/];
                }
            });
        });
    };
    StorageServiceImpl.prototype.downloadFile = function (id, destinationPath) {
        return Promise.resolve(undefined);
    };
    StorageServiceImpl.prototype.downloadBytes = function (id) {
        return __awaiter(this, void 0, void 0, function () {
            var resp;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, axios.get(this.baseUrl + '/' + id, {
                            headers: this.client.headers(),
                            validateStatus: function (status) { return true; },
                        })];
                    case 1:
                        resp = _a.sent();
                        ClientImpl.ensureResponseSuccess(resp);
                        return [2 /*return*/, resp.data];
                }
            });
        });
    };
    StorageServiceImpl.prototype.uploadFile = function (id, file, mimeType) {
        return Promise.resolve(undefined);
    };
    return StorageServiceImpl;
}());
export { StorageServiceImpl };
// package io.apibrew.client.storage.impl;
//
// import io.apibrew.client.Client;
// import io.apibrew.client.Repository;
// import io.apibrew.client.impl.ClientImpl;
// import io.apibrew.client.storage.StorageService;
// import io.apibrew.client.storage.model.StorageObject;
// import kong.unirest.ContentType;
// import kong.unirest.HttpResponse;
// import kong.unirest.Unirest;
// import lombok.RequiredArgsConstructor;
//
// import java.io.File;
// import java.io.InputStream;
// import java.util.UUID;
//
// @RequiredArgsConstructor
// public class StorageServiceImpl implements StorageService {
//
//     private final Client client;
//     private final String baseUrl;
//
//     @Override
//     public Repository<StorageObject> repository() {
//         return client.repo(StorageObject.class);
//     }
//
//     @Override
//     public void uploadBytes(UUID id, byte[] data, String fileName) {
//         HttpResponse<?> result = Unirest.post(baseUrl + "/" + id.toString())
//                 .header("Authorization", client.headers().get("Authorization"))
//                 .multiPartContent()
//                 .field("file", data, fileName)
//                 .asEmpty();
//
//         ClientImpl.ensureResponseSuccess(result);
//     }
//
//     @Override
//     public void uploadBytes(UUID id, byte[] data, String fileName, String mimeType) {
//         HttpResponse<?> result = Unirest.post(baseUrl + "/" + id.toString())
//                 .header("Authorization", client.headers().get("Authorization"))
//                 .multiPartContent()
//                 .field("file", data, ContentType.create(mimeType), fileName)
//                 .asEmpty();
//
//         ClientImpl.ensureResponseSuccess(result);
//     }
//
//     @Override
//     public void uploadFile(UUID id, File file) {
//         HttpResponse<?> result = Unirest.post(baseUrl + "/" + id.toString())
//                 .header("Authorization", client.headers().get("Authorization"))
//                 .multiPartContent()
//                 .field("file", file)
//                 .asEmpty();
//
//         ClientImpl.ensureResponseSuccess(result);
//     }
//
//     @Override
//     public void uploadFile(UUID id, File file, String mimeType) {
//         HttpResponse<?> result = Unirest.post(baseUrl + "/" + id.toString())
//                 .header("Authorization", client.headers().get("Authorization"))
//                 .multiPartContent()
//                 .field("file", file, mimeType)
//                 .asEmpty();
//
//         ClientImpl.ensureResponseSuccess(result);
//     }
//
//     @Override
//     public void uploadStream(UUID id, InputStream value, String fileName) {
//         HttpResponse<?> result = Unirest.post(baseUrl + "/" + id.toString())
//                 .header("Authorization", client.headers().get("Authorization"))
//                 .multiPartContent()
//                 .field("file", value, fileName)
//                 .asEmpty();
//
//         ClientImpl.ensureResponseSuccess(result);
//     }
//
//     @Override
//     public void uploadStream(UUID id, InputStream value, String fileName, String mimeType) {
//         HttpResponse<?> result = Unirest.post(baseUrl + "/" + id.toString())
//                 .header("Authorization", client.headers().get("Authorization"))
//                 .multiPartContent()
//                 .field("file", value, ContentType.create(mimeType), fileName)
//                 .asEmpty();
//
//         ClientImpl.ensureResponseSuccess(result);
//     }
//
//     @Override
//     public byte[] downloadBytes(UUID id) {
//         HttpResponse<byte[]> result = Unirest.get(baseUrl + "/" + id.toString())
//                 .headers(client.headers())
//                 .asBytes();
//
//         ClientImpl.ensureResponseSuccess(result);
//
//         return result.getBody();
//     }
//
//     @Override
//     public File downloadFile(UUID id, String destinationPath) {
//         HttpResponse<File> result = Unirest.get(baseUrl + "/" + id.toString())
//                 .headers(client.headers())
//                 .asFile(destinationPath);
//
//         ClientImpl.ensureResponseSuccess(result);
//
//         return result.getBody();
//     }
// }
