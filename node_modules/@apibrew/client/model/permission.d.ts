import { User } from './user';
import { Role } from './role';
export interface Permission {
    id: string;
    version: number;
    auditData?: AuditData;
    namespace?: string;
    resource?: string;
    recordSelector?: BooleanExpression;
    operation: Operation;
    before?: string | Date;
    after?: string | Date;
    user?: User;
    role?: Role;
    permit: Permit;
    localFlags?: object;
}
export declare const PermissionEntityInfo: {
    namespace: string;
    resource: string;
    restPath: string;
};
export interface AuditData {
    createdBy: string;
    updatedBy: string;
    createdOn: string | Date;
    updatedOn: string | Date;
}
export interface BooleanExpression {
    and: BooleanExpression[];
    or: BooleanExpression[];
    not: BooleanExpression;
    equal: PairExpression;
    lessThan: PairExpression;
    greaterThan: PairExpression;
    lessThanOrEqual: PairExpression;
    greaterThanOrEqual: PairExpression;
    in: PairExpression;
    isNull: Expression;
    regexMatch: RegexMatchExpression;
}
export interface PairExpression {
    left: Expression;
    right: Expression;
}
export interface RegexMatchExpression {
    pattern: string;
    expression: Expression;
}
export interface Expression {
    property: string;
    value: object;
}
export declare enum Operation {
    READ = "READ",
    CREATE = "CREATE",
    UPDATE = "UPDATE",
    DELETE = "DELETE",
    FULL = "FULL"
}
export declare enum Permit {
    ALLOW = "ALLOW",
    REJECT = "REJECT"
}
export declare const PermissionResource: unknown;
