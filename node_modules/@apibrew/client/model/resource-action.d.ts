import { Resource } from './resource';
export interface ResourceAction {
    id: string;
    version: number;
    auditData?: AuditData;
    resource: Resource;
    name: string;
    title?: string;
    description?: string;
    internal: boolean;
    types?: SubType[];
    input?: {
        [key: string]: Property;
    };
    output?: Property;
    annotations?: {
        [key: string]: string;
    };
}
export declare const ResourceActionEntityInfo: {
    namespace: string;
    resource: string;
    restPath: string;
};
export interface SubType {
    name: string;
    title: string;
    description: string;
    properties: {
        [key: string]: Property;
    };
}
export interface Property {
    type: Type;
    typeRef: string;
    primary: boolean;
    required: boolean;
    unique: boolean;
    immutable: boolean;
    length: number;
    item: Property;
    reference: string;
    backReference: string;
    defaultValue: object;
    enumValues: string[];
    exampleValue: object;
    title: string;
    description: string;
    annotations: {
        [key: string]: string;
    };
}
export interface AuditData {
    createdBy: string;
    updatedBy: string;
    createdOn: string | Date;
    updatedOn: string | Date;
}
export declare enum Type {
    BOOL = "BOOL",
    STRING = "STRING",
    FLOAT32 = "FLOAT32",
    FLOAT64 = "FLOAT64",
    INT32 = "INT32",
    INT64 = "INT64",
    BYTES = "BYTES",
    UUID = "UUID",
    DATE = "DATE",
    TIME = "TIME",
    TIMESTAMP = "TIMESTAMP",
    OBJECT = "OBJECT",
    MAP = "MAP",
    LIST = "LIST",
    REFERENCE = "REFERENCE",
    ENUM = "ENUM",
    STRUCT = "STRUCT"
}
export declare const ResourceActionResource: unknown;
